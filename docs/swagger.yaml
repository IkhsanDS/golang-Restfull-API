basePath: /api/v1
definitions:
  gin.H:
    additionalProperties: {}
    type: object
  handlers.CreateTodoInput:
    properties:
      title:
        type: string
    required:
    - title
    type: object
  handlers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.RegisterInput:
    properties:
      email:
        type: string
      name:
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  handlers.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  handlers.UpdateTodoInput:
    properties:
      completed:
        type: boolean
      title:
        type: string
    type: object
  models.Todo:
    properties:
      completed:
        description: ✅ tinyint(1) + default 0
        type: boolean
      createdAt:
        type: string
      id:
        description: ✅ char(36), bukan uuid
        type: integer
      title:
        type: string
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: Todo API with JWT Auth, RBAC, and pagination.
  title: Todo API
  version: "1.1"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
      summary: Login
      tags:
      - auth
  /auth/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
      summary: Register new user
      tags:
      - auth
  /todos:
    get:
      produces:
      - application/json
      responses: {}
      summary: List todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      parameters:
      - description: Create payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateTodoInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Create todo
      tags:
      - todos
  /todos/{id}:
    delete:
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete todo
      tags:
      - todos
    get:
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Get todo by ID
      tags:
      - todos
    put:
      consumes:
      - application/json
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateTodoInput'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update todo
      tags:
      - todos
securityDefinitions:
  BearerAuth:
    description: 'Format: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
